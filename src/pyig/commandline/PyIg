#!/usr/bin/env python
import os
import gzip
import sys
from Bio import SeqIO
from pyig.backend.PyIgArgumentParser import PyIgArgumentParser
from pyig.backend.SplitFasta import split_fasta
from pyig.backend.IgBlastRun import IgBlastRun
from multiprocessing import Process, Queue

if sys.version_info < (2, 7):
    raise OSError("You need python 2.7.X, rerun with \%python2.7 /path/to/PyIg")

def files_zipper(list_of_files,outfile):
    with gzip.open(outfile, 'wb') as final_out:
        print "Zipping together output..."
        for file in list_of_files:
            with open(file) as finfile:
                for line in finfile:
                    final_out.write(line)
            os.remove(file) 

def file_zipper(file,outfile):
    print "Zipping up single file"
    f_in = open(file, 'rb')
    f_out = gzip.open(outfile,'wb')
    f_out.writelines(f_in)
    f_out.close()
    f_in.close()
    os.remove(file)

def get_seqs_dict(fasta_file):
    f_dict = {}
    for seq in SeqIO.parse(fasta_file, 'fasta'):
        f_dict[seq.id] = str(seq.seq)
    return f_dict


def main(PyIgParse):
    to_join = []
    queue = Queue()
    fasta_file = PyIgParse['query']
    num_procs = int(PyIgParse['multi'])
    output_file = PyIgParse['out']
    if num_procs > 1:
        jobs = []
        split_fasta_file_names = split_fasta(
            num_procs, fasta_file, delete=False)
        for num, name in enumerate(split_fasta_file_names, start=1):
            print "Running IgBlast on processor {0}".format(num)
            IgBlast = IgBlastRun(PyIgParse, get_seqs_dict(name))
            IgBlast.set_query(name)
            p = Process(target=IgBlast.run_single_process, args=(queue, ))
            jobs.append(p)
            p.start()

        for job, temp_file in zip(jobs, split_fasta_file_names):
            job.join()
            to_join.append(queue.get())
        files_zipper(to_join,output_file)

    else:
        print "Running IgBlast on single processor"
        split_fasta_file_names = split_fasta(
            1, fasta_file, delete=False)
        IgBlast = IgBlastRun(PyIgParse,
                                    get_seqs_dict(split_fasta_file_names[0]))
        IgBlast.set_query(split_fasta_file_names[0])
        p = Process(target=IgBlast.run_single_process,
                    args=(queue,))
        p.start()
        p.join()
        file_zipper(queue.get(),output_file)


if __name__ == '__main__':
    PyIg_ParseDict = PyIgArgumentParser().parse_arguments()
    main(PyIg_ParseDict)
